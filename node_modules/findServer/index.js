var request = require('request');

function serverTest(url, priority) {
    //creates options to allow for request timeout
    var options = {
        url: url,
        timeout: 5000
    };
    return new Promise (
        function(resolve, reject) {
            request(options, function(err, res, body) {
                //if (err) {console.log("There was an error: " + err)};
                //test if server responds with a positive status
                if (res !== undefined ) {
                    if (res.statusCode >= 200 && res.statusCode <= 299) {
                        //console.log("response from online server is " + res.statusCode);
                        resolve({"url": url, "priority": priority});
                    } else
                    if (res.statusCode >= 300 && res.statusCode <= 399) {
                        //console.log("response from redirected server is " + res.statusCode);
                        reject("The server is not working");
                    } else
                    if (res.statusCode >= 400 && res.statusCode <= 499) {
                        //console.log("response from not working server is " + res.statusCode);
                        reject("The server is broken");
                    }//==> end of inner if/else statement
                } else {
                    reject("Server is unresponsive");
                }//==> end of outer if/else statement
            });//==> end of get request
        }
    );
};



exports.findServer = function(servers) {
 // var sort_server =  servers.sort((a, b) => a.priority - b.priority);
 // console.log('sort_server ')
  var build = []
  var promises = servers.map(server => {
    return serverTest(server.url, server.priority)
      .then(resolve => {
         build.push(resolve)
      })
      .catch(error => {
        // Promise that will reject
        // console.log("Server " + server.url + " failed with : " + error)
        return error;
      })
  })

  return Promise.all(promises).then(values => {

     if (build.length > 1 ) {
             build.sort(function(a,b){
                 return a.priority - b.priority;
             })
             return(build[0].url + " has the lowest available priority.");
         } else {
             return ('All servers all offline');
         }
  });
}